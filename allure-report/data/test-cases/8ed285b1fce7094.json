{"uid":"8ed285b1fce7094","name":"test_carNamesandPrices[chrome-BMW-BMWs Cars]","fullName":"test_Carwale.Test_Carwale#test_carNamesandPrices","historyId":"cf7426e7556b3f8bbb364587d893565d","time":{"start":1685969078621,"stop":1685969079709,"duration":1088},"status":"failed","statusMessage":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","statusTrace":"self = <TestCases.test_Carwale.Test_Carwale object at 0x00000162FCA9E810>\ncarBrand = 'BMW', carTitle = 'BMWs Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_data(\"NewCarsTest\"))\n    def test_carNamesandPrices(self, carBrand, carTitle):\n        log.logger.info(\"Inside car names and prices test\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        \"\"\" ******the page object model -> whichever method is responsible to take you on next page should\n        return the object of that page (mthod/function chaining)\n        ***Single column in excel sheet will take value in form of list [BMW], when 2 column take string BMW\"\"\"\n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n        title = car.getCarTitle()\n        print(\"car title is: \", title)\n>       assert title == carTitle, \"Not on the correct page\"\nE       AssertionError: Not on the correct page\nE       assert 'BMW Cars' == 'BMWs Cars'\nE         - BMWs Cars\nE         ?    -\nE         + BMW Cars\n\ntest_Carwale.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1685969075220,"stop":1685969078621,"duration":3401},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"log_on_failure","time":{"start":1685969078621,"stop":1685969078621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","statusTrace":"self = <TestCases.test_Carwale.Test_Carwale object at 0x00000162FCA9E810>\ncarBrand = 'BMW', carTitle = 'BMWs Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_data(\"NewCarsTest\"))\n    def test_carNamesandPrices(self, carBrand, carTitle):\n        log.logger.info(\"Inside car names and prices test\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        \"\"\" ******the page object model -> whichever method is responsible to take you on next page should\n        return the object of that page (mthod/function chaining)\n        ***Single column in excel sheet will take value in form of list [BMW], when 2 column take string BMW\"\"\"\n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n        title = car.getCarTitle()\n        print(\"car title is: \", title)\n>       assert title == carTitle, \"Not on the correct page\"\nE       AssertionError: Not on the correct page\nE       assert 'BMW Cars' == 'BMWs Cars'\nE         - BMWs Cars\nE         ?    -\nE         + BMW Cars\n\ntest_Carwale.py:65: AssertionError","steps":[],"attachments":[{"uid":"d26543376ff44a5c","name":"log","source":"d26543376ff44a5c.txt","type":"text/plain","size":311}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1685969079870,"stop":1685969080143,"duration":273},"status":"passed","steps":[],"attachments":[{"uid":"dea2ef518677d8","name":"dologin","source":"dea2ef518677d8.png","type":"image/png","size":120764}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"get_browser::0","time":{"start":1685969080150,"stop":1685969082306,"duration":2156},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_Carwale"},{"name":"subSuite","value":"Test_Carwale"},{"name":"host","value":"DESKTOP-6720TO0"},{"name":"thread","value":"20200-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_Carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'BMW'"},{"name":"carTitle","value":"'BMWs Cars'"},{"name":"get_browser","value":"'chrome'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"8ed285b1fce7094.json","parameterValues":["'BMW'","'BMWs Cars'","'chrome'"]}