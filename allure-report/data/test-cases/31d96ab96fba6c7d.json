{"uid":"31d96ab96fba6c7d","name":"test_carNamesandPrices[firefox-BMW-BMWs Cars]","fullName":"test_Carwale.Test_Carwale#test_carNamesandPrices","historyId":"13a863ee7ac4886feb9a6627f70ba429","time":{"start":1687412394475,"stop":1687412396472,"duration":1997},"status":"failed","statusMessage":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","statusTrace":"self = <TestCases.test_Carwale.Test_Carwale object at 0x0000022C76B7F010>\ncarBrand = 'BMW', carTitle = 'BMWs Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_data(\"NewCarsTest\"))\n    def test_carNamesandPrices(self, carBrand, carTitle):\n        log.logger.info(\"Inside car names and prices test\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        \"\"\" ******the page object model -> whichever method is responsible to take you on next page should\n        return the object of that page (mthod/function chaining)\n        ***Single column in excel sheet will take value in form of list [BMW], when 2 column take string BMW\"\"\"\n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n        title = car.getCarTitle()\n        print(\"car title is: \", title)\n>       assert title == carTitle, \"Not on the correct page\"\nE       AssertionError: Not on the correct page\nE       assert 'BMW Cars' == 'BMWs Cars'\nE         - BMWs Cars\nE         ?    -\nE         + BMW Cars\n\ntest_Carwale.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1687412374874,"stop":1687412394474,"duration":19600},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"log_on_failure","time":{"start":1687412394474,"stop":1687412394474,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","statusTrace":"self = <TestCases.test_Carwale.Test_Carwale object at 0x0000022C76B7F010>\ncarBrand = 'BMW', carTitle = 'BMWs Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_data(\"NewCarsTest\"))\n    def test_carNamesandPrices(self, carBrand, carTitle):\n        log.logger.info(\"Inside car names and prices test\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        \"\"\" ******the page object model -> whichever method is responsible to take you on next page should\n        return the object of that page (mthod/function chaining)\n        ***Single column in excel sheet will take value in form of list [BMW], when 2 column take string BMW\"\"\"\n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n        title = car.getCarTitle()\n        print(\"car title is: \", title)\n>       assert title == carTitle, \"Not on the correct page\"\nE       AssertionError: Not on the correct page\nE       assert 'BMW Cars' == 'BMWs Cars'\nE         - BMWs Cars\nE         ?    -\nE         + BMW Cars\n\ntest_Carwale.py:65: AssertionError","steps":[],"attachments":[{"uid":"aa944b7100ee0ddf","name":"log","source":"aa944b7100ee0ddf.txt","type":"text/plain","size":311}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1687412400573,"stop":1687412400721,"duration":148},"status":"passed","steps":[],"attachments":[{"uid":"2e070a0d2a10a32c","name":"dologin","source":"2e070a0d2a10a32c.png","type":"image/png","size":126704}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"get_browser::0","time":{"start":1687412400723,"stop":1687412404849,"duration":4126},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_Carwale"},{"name":"subSuite","value":"Test_Carwale"},{"name":"host","value":"DESKTOP-6720TO0"},{"name":"thread","value":"20356-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_Carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'BMW'"},{"name":"carTitle","value":"'BMWs Cars'"},{"name":"get_browser","value":"'firefox'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4e5beb7a6f0a86f4","status":"failed","statusDetails":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","time":{"start":1685969133922,"stop":1685969135482,"duration":1560}},{"uid":"d36f01b895b2b2ae","status":"failed","statusDetails":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","time":{"start":1685967506108,"stop":1685967507495,"duration":1387}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e85f16293a005cce","reportUrl":"http://localhost:8080/job/PageObjectModel/3/allure/#testresult/e85f16293a005cce","status":"failed","statusDetails":"AssertionError: Not on the correct page\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars","time":{"start":1685969133922,"stop":1685969135482,"duration":1560}}]},"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"31d96ab96fba6c7d.json","parameterValues":["'BMW'","'BMWs Cars'","'firefox'"]}